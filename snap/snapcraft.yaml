name: node-red-rpi
adopt-info: node-red
summary: Low-code programming for event-driven applications
description: 
  Node-RED is a flow based programming application for wiring together
  hardware devices, APIs and online services in new and interesting ways.
  For more information see http://nodered.org

  This snap is based on https://github.com/node-red but has additional
  Raspberry Pi specific sensor libraries and a toolchain included.

  Node-RED listens by default on port 1880 after installation.

  You will have to connect all the required snap interfaces for hardware
  your flows will use.

  The snap does come with the palette editor enabled and ships the gcc
  toolchain as well as a bunch of development libraries so that npm can
  dynamically compile nodes where required when you add them via the
  palette editor.

  To see all connected and available connections please run

      sudo snap connections node-red-rpi

  To connect i.e. a GPIO interface (GPIO 14 here) you do

      sudo snap connect node-red-rpi:gpio pi:bcm-gpio-14
      sudo snap connect node-red-rpi:gpio-memory-control

  Similar for i2c

      sudo snap connect node-red-rpi:i2c pi:i2c-1

  When the snap is running you can view the Node-RED log using

      journalctl -f -u snap.node-red-rpi*

  You can also stop and restart the application by

      snap restart node-red-rpi

      snap disable node-red-rpi
      snap enable node-red-rpi

  The settings.js and flows.json files are located in
  the `/root/snap/node-red-rpi/current/` directory.

confinement: strict
grade: stable
base: core18

# Limit architectures to Pi specifc arches
architectures:
  - build-on: armhf
  - build-on: arm64

apps:
  node-red:
    command: node $NODE_OPTS $SNAP/lib/node_modules/node-red/red.js
    daemon: simple
    restart-condition: on-failure
    environment:
      NODE_PATH: $SNAP/lib
      C_INCLUDE_PATH: $SNAP/usr/lib/gcc/$SNAPCRAFT_ARCH_TRIPLET/7/include:$SNAP/usr/lib/gcc/$SNAPCRAFT_ARCH_TRIPLET/7/include-fixed:$SNAP/usr/include/$SNAPCRAFT_ARCH_TRIPLET:$SNAP/usr/include
      CPLUS_INCLUDE_PATH: $SNAP/usr/include/c++/7:$SNAP/usr/include/$SNAPCRAFT_ARCH_TRIPLET/c++/7:$SNAP/usr/include/c++/7/backward:$SNAP/usr/lib/gcc/$SNAPCRAFT_ARCH_TRIPLET/7/include:$SNAP/usr/lib/gcc/$SNAPCRAFT_ARCH_TRIPLET/7/include-fixed:$SNAP/usr/include/$SNAPCRAFT_ARCH_TRIPLET:$SNAP/usr/include
      GCC_EXEC_PREFIX: $SNAP/usr/lib/gcc/
      LIBRARY_PATH: $SNAP/usr/lib/gcc/$SNAPCRAFT_ARCH_TRIPLET/7:$SNAP/usr/lib/gcc/$SNAPCRAFT_ARCH_TRIPLET/7/../../../:$SNAP/lib:$SNAP/usr/lib:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - gpio-memory-control
      - hardware-observe
      - home
      - i2c
      - iio
      - log-observe
      - login-session-observe
      - mount-observe
      - network-bind
      - network
      - network-observe
      - physical-memory-control
      - pulseaudio
      - raw-usb
      - removable-media
      - serial-port
      - shutdown
      - spi
      - system-observe
  npm:
    command: bin/npm
    plugs:
      - home
      - network

layout:
  /usr/bin/python:
    symlink: $SNAP/usr/bin/python
  /usr/share/doc/python-rpi.gpio: # extremely silly hack, since node-red hardcodes either of two dirs
    symlink: $SNAP/usr/share/doc/python # (this is one of them) to determine if RPi.GPIO is installed
  /usr/bin/free:
    bind-file: $SNAP/usr/bin/free
  /usr/bin/top:
    bind-file: $SNAP/usr/bin/top
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libpthread_nonshared.a:
    bind-file: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libpthread_nonshared.a
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libc_nonshared.a:
    bind-file: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libc_nonshared.a

parts:
  sensor-libs:
    plugin: python
    python-version: python2
    python-packages:
      - RPi.GPIO
      - RPi.bme280
      - Adafruit_Python_DHT
      - adafruit-mcp3008
      - mcp3008
      - picamera
      - pyserial
      - unicornhat
    build-packages:
      - libssl-dev
      - libffi-dev
      - python-dev
      - python-pil
      - python-smbus
    build-environment:
      - READTHEDOCS: 'True'
    stage-packages:
      - coreutils
      - bluetooth
      - bluez
      - i2c-tools
      - libbluetooth3
      - libbluetooth-dev
      - libffi6
      - libffi-dev
      - libi2c-dev
      - libssl1.0.0
      - libssl-dev
      - libudev1
      - libudev-dev
      - libusb-1.0-0
      - libusb-1.0-0-dev
      - procps
      - python-minimal
      - python-pil
      - python-smbus
    override-pull: |
      snapcraftctl pull

      # hack to make adafruit dht lib always build for pi(2/3/4)
      tar xf ../python-packages/Adafruit_Python_DHT-1.4.0.tar.gz
      plat_detect="Adafruit_Python_DHT-1.4.0/Adafruit_DHT/platform_detect.py"
      sed -i '/^.*# Handle R.*/a \    return RASPBERRY_PI' $plat_detect
      sed -i '/^.*# Revision list.*/a \    return 2' $plat_detect
      sed -i '/^.*# Anything else.*/a \    return 3' $plat_detect
      tar czf ../python-packages/Adafruit_Python_DHT-1.4.0.tar.gz Adafruit_Python_DHT-1.4.0
      rm -rf Adafruit_Python_DHT-1.4.0
  node-red:
    source: https://github.com/node-red/node-red.git
    source-tag: 1.1.2
    plugin: nodejs
    nodejs-version: 10.21.0
    nodejs-package-manager: npm
    after: [ sensor-libs ]
    stage-packages:
      - libatomic1
    build-packages:
      - build-essential
    override-build: |
      PATH=$PATH:$SNAPCRAFT_PART_SRC/../npm/bin
      npm config set unsafe-perm True

      # workaround for build.snapcraft.io builds
      # https://bugs.launchpad.net/bugs/1886861
      if [ -n "$http_proxy" ]; then
        export ELECTRON_GET_USE_PROXY=1
        export GLOBAL_AGENT_HTTP_PROXY="${http_proxy}"
        export GLOBAL_AGENT_HTTPS_PROXY="${http_proxy}"
      fi

      # build node-red
      npm install 
      npm run build

      # set version
      VER=$(npm show node-red version)
      echo "VERSION $VER"
      snapcraftctl set-version $VER

      # copy node and npm
      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      cp -av $SNAPCRAFT_PART_SRC/../npm/bin/node $SNAPCRAFT_PART_INSTALL/bin/
      cp -av $SNAPCRAFT_PART_SRC/../npm/bin/npm $SNAPCRAFT_PART_INSTALL/bin/
      cp -av $SNAPCRAFT_PART_SRC/../npm/lib $SNAPCRAFT_PART_INSTALL/

      # copy node-red
      mkdir -p $SNAPCRAFT_PART_INSTALL/lib
      cp -av node_modules $SNAPCRAFT_PART_INSTALL/lib/
      cp -av packages/node_modules $SNAPCRAFT_PART_INSTALL/lib/

      # copy metadata and docs
      cp -av *.json $SNAPCRAFT_PART_INSTALL/
      cp -av *.md $SNAPCRAFT_PART_INSTALL/
      cp -av LICENSE $SNAPCRAFT_PART_INSTALL/
  toolchain:
    plugin: nil
    source: .
    stage-packages:
      - libc6-dev
      - libstdc++-6-dev
      - libstdc++6
      - g++
      - gcc
      - git
      - make
      - openssh-client
    override-build: |
      snapcraftctl build

      # create symlink that normally comes from update-alternatives
      cd $SNAPCRAFT_PART_INSTALL/usr/bin
      ln -sf gcc cc
